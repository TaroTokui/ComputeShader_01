#pragma kernel Init
#pragma kernel Update

// スレッドグループのスレッドサイズ
#define ThreadBlockSize 256

struct CubeData
{
	//float3 BasePosition;
	float3 Position;
	//float3 Velocity;
	float3 Albedo;
	//float2 Index;
};

RWStructuredBuffer<CubeData> _CubeDataBuffer;
int _Width;
int _Height;

// 経過時間
float _Time;

// 位相差
float _Phi;

// 波長
float _Lambda;

// 振幅
float _Amplitude;

float3 hsv2rgb(float3 c)
{
	float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

[numthreads(ThreadBlockSize, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
	// インデックス取得
	const unsigned int index = id.x;

	int x = index % _Width;
	int z = index / _Height;

	_CubeDataBuffer[index].Position = float3(x - _Width/2, 0, z - _Height/2);
	_CubeDataBuffer[index].Albedo = float3(1,1,1);
}

[numthreads(ThreadBlockSize, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
	// インデックス取得
	const unsigned int index = id.x;
	float3 pos = _CubeDataBuffer[index].Position;

	float y = _Amplitude * (1 + sin(pos.x / _Lambda + _Phi * _Time));
	y += _Amplitude * (1 + sin(pos.z / _Lambda + _Phi * _Time));

	float hue = (y + _Amplitude * 2) / (4 * _Amplitude);

	_CubeDataBuffer[index].Position = float3(pos.x, y, pos.z);
	_CubeDataBuffer[index].Albedo = float3(hsv2rgb(float3(hue, 1, 1)));
}